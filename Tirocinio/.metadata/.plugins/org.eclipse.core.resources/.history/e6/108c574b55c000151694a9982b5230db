package it.sp4te.css.main;

import java.util.ArrayList;
import java.util.HashMap;

import it.sp4te.css.agents.FusionCenter;
import it.sp4te.css.agents.MaliciousSecondaryUser;
import it.sp4te.css.agents.PrimaryUser;
import it.sp4te.css.agents.TrustedNode;
import it.sp4te.css.agents.TrustedSecondaryUser;
import it.sp4te.css.graphgenerator.JFreeChartGraphGenerator;
import it.sp4te.css.model.Signal;
import it.sp4te.css.signalprocessing.SignalProcessor;
import it.sp4te.css.signalprocessing.Utils;

public class ListTNCss {
	public static void main(String args[]) throws Exception {
		int length = 1000; // poi 10000
		int attempts =1000;
		int inf=-14;
		int sup=-5 ;
		int block=10; //blocchi energy Detector
		double pfa=0.01; //probabilità di falso allarme
		int numberTSU;
		int numberMSU;
		int numberTN;//numero di utenti fidati
		int L= 28; //N+(delta*j);
		int K= 14; //M+delta;
		int M=8; //BIANCA->GRIGIA
		int N=10;//GRIGIA->NERA
		
		
        //int j=3;
		//Creo il Fusion center
		FusionCenter FC=new FusionCenter();
		//Creo l'utente primario
		PrimaryUser PU= new PrimaryUser();
		//creo il segnale
		Signal s = PU.createAndSend(length);
		for(int h=1;h<8;h++){		
	   for(int i=1;i<6;i++){
						numberTSU=50-i;
						numberMSU=i;
						numberTN=5;	
		ArrayList<TrustedSecondaryUser> TrustedSecondaryUsers;
		ArrayList<TrustedNode> TrustedNode;
		ArrayList<MaliciousSecondaryUser> MaliciousSecondaryUsers;
		
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionAbsenceReputation=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionAbsenceList=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionAbsenceReputationTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionAbsenceListTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
        HashMap<String, ArrayList<Double>> DetectionGraphAbsence = new HashMap<String, ArrayList<Double>>();
        HashMap<String, ArrayList<Double>> DetectionGraphAbsenceTN = new HashMap<String, ArrayList<Double>>();


		
		ArrayList<Double> ListCooperativeEnergyDetectionAbsence= new ArrayList<Double>();;
		ArrayList<Double> ReputationEnergyDetectionAbsence = new ArrayList<Double>();;
		ArrayList<Double> ReputationTNEnergyDetectionAbsence = new ArrayList<Double>();;
		ArrayList<Double> ListCooperativeTNEnergyDetectionAbsence= new ArrayList<Double>();;
		
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionOppositeReputation=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionOppositeList=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionOppositeReputationTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionOppositeListTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
        HashMap<String, ArrayList<Double>> DetectionGraphOpposite = new HashMap<String, ArrayList<Double>>();
        HashMap<String, ArrayList<Double>> DetectionGraphOppositeTN = new HashMap<String, ArrayList<Double>>();
        
        ArrayList<Double> ListCooperativeEnergyDetectionOpposite= new ArrayList<Double>();;
		ArrayList<Double> ReputationEnergyDetectionOpposite = new ArrayList<Double>();;
		ArrayList<Double> ReputationTNEnergyDetectionOpposite = new ArrayList<Double>();;
		ArrayList<Double> ListCooperativeTNEnergyDetectionOpposite= new ArrayList<Double>();;
		
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionIntelligentReputation=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionIntelligentList=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionIntelligentReputationTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
		HashMap<String,ArrayList<ArrayList<Integer>>> userToBinaryDecisionIntelligentListTN=new HashMap<String,ArrayList<ArrayList<Integer>>>();
        HashMap<String, ArrayList<Double>> DetectionGraphIntelligent = new HashMap<String, ArrayList<Double>>();
        HashMap<String, ArrayList<Double>> DetectionGraphIntelligentTN = new HashMap<String, ArrayList<Double>>();
        
        ArrayList<Double> ListCooperativeEnergyDetectionIntelligent= new ArrayList<Double>();;
		ArrayList<Double> ReputationEnergyDetectionIntelligent = new ArrayList<Double>();;
		ArrayList<Double> ReputationTNEnergyDetectionIntelligent = new ArrayList<Double>();;
		ArrayList<Double> ListCooperativeTNEnergyDetectionIntelligent= new ArrayList<Double>();;
	
		
		TrustedSecondaryUsers= Utils.createTrustedSecondaryUsers(numberTSU,s,s.getLenght(), SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
		TrustedNode= Utils.createTrustedNode(numberTN,s,s.getLenght(), SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
		MaliciousSecondaryUsers=Utils.createMaliciousSecondaryUsers(numberMSU,s,s.getLenght(), SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
		HashMap<String,ArrayList<ArrayList<Integer>>> binaryVector=Utils.genereteBinaryDecisionVectors(TrustedSecondaryUsers, pfa);

		///////////////////////////////////////////////////
		userToBinaryDecisionAbsenceReputation=binaryVector;
		userToBinaryDecisionAbsenceReputation.putAll(Utils.genereteAbsenceBinaryDecisionVectors(MaliciousSecondaryUsers));
		ReputationEnergyDetectionAbsence=FC.reputationBasedDecision(inf, sup, userToBinaryDecisionAbsenceReputation,attempts,"absence"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionAbsenceReputationTN=binaryVector;
		userToBinaryDecisionAbsenceReputationTN.putAll(Utils.genereteAbsenceBinaryDecisionVectors(MaliciousSecondaryUsers));
		ReputationTNEnergyDetectionAbsence=FC.reputationBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionAbsenceReputationTN,
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa),attempts,"absence"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionAbsenceList=binaryVector;
		userToBinaryDecisionAbsenceList.putAll(Utils.genereteAbsenceBinaryDecisionVectors(MaliciousSecondaryUsers));
		ListCooperativeEnergyDetectionAbsence= FC.ListBasedDecision(inf, sup, userToBinaryDecisionAbsenceList, attempts, K, L, M, N,"MSU"+numberMSU+"_Absence"+h);

		userToBinaryDecisionAbsenceListTN=binaryVector;
		userToBinaryDecisionAbsenceListTN.putAll(Utils.genereteAbsenceBinaryDecisionVectors(MaliciousSecondaryUsers));
		ListCooperativeTNEnergyDetectionAbsence=FC.ListBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionAbsenceListTN, 
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa), attempts, K, L, M, N, "absence"+"MSU"+numberMSU+h);
		
		DetectionGraphAbsence.put("ListBased", ListCooperativeEnergyDetectionAbsence);
		DetectionGraphAbsenceTN.put("ListBased with TN", ListCooperativeTNEnergyDetectionAbsence);
		DetectionGraphAbsence.put("Reputation", ReputationEnergyDetectionAbsence);
		DetectionGraphAbsenceTN.put("Reputation with TN", ReputationTNEnergyDetectionAbsence);
		
		JFreeChartGraphGenerator graphAbsence= new JFreeChartGraphGenerator("List Based VS Reputation");
		graphAbsence.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation", DetectionGraphAbsence, inf, sup, "C:/Users/Pietro/Desktop/Output/"+K+L+M+N+"_AbsenceMSU"+numberMSU+h+".jpg");
		
		JFreeChartGraphGenerator graphAbsenceTN= new JFreeChartGraphGenerator("List Based VS Reputation with TN");
		graphAbsenceTN.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation with TN", DetectionGraphAbsenceTN, inf, sup, "C:/Users/Pietro/Desktop/OutputTN/"+K+L+M+N+"_AbsenceMSU"+numberMSU+h+"_TN.jpg");
		
////////////////////////////////////////
		
		userToBinaryDecisionOppositeReputation=binaryVector;
		userToBinaryDecisionOppositeReputation.putAll(Utils.genereteOppositeBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ReputationEnergyDetectionOpposite=FC.reputationBasedDecision(inf, sup, userToBinaryDecisionOppositeReputation,attempts,"opposite"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionOppositeReputationTN=binaryVector;
		userToBinaryDecisionOppositeReputationTN.putAll(Utils.genereteOppositeBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ReputationTNEnergyDetectionOpposite=FC.reputationBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionOppositeReputationTN,
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa),attempts,"Opposite"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionOppositeList=binaryVector;
		userToBinaryDecisionOppositeList.putAll(Utils.genereteOppositeBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ListCooperativeEnergyDetectionOpposite= FC.ListBasedDecision(inf, sup, userToBinaryDecisionOppositeList, attempts, K, L, M, N,"MSU"+numberMSU+"_Opposite"+h);

		userToBinaryDecisionOppositeListTN=binaryVector;
		userToBinaryDecisionOppositeListTN.putAll(Utils.genereteOppositeBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ListCooperativeTNEnergyDetectionOpposite=FC.ListBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionOppositeListTN, 
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa), attempts, K, L, M, N, "Opposite"+"MSU"+numberMSU+h);
		
		DetectionGraphOpposite.put("ListBased", ListCooperativeEnergyDetectionOpposite);
		DetectionGraphOppositeTN.put("ListBased with TN", ListCooperativeTNEnergyDetectionOpposite);
		DetectionGraphOpposite.put("Reputation", ReputationEnergyDetectionOpposite);
		DetectionGraphOppositeTN.put("Reputation with TN", ReputationTNEnergyDetectionOpposite);
		
		JFreeChartGraphGenerator graphOpposite= new JFreeChartGraphGenerator("List Based VS Reputation - Opposite MSU");
		graphOpposite.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation- Opposite MSU", DetectionGraphOpposite, inf, sup, "C:/Users/Pietro/Desktop/Output/"+K+L+M+N+"_OppositeMSU"+numberMSU+h+".jpg");
		
		JFreeChartGraphGenerator graphOppositeTN= new JFreeChartGraphGenerator("List Based VS Reputation with TN - Opposite MSU");
		graphOppositeTN.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation with TN - Opposite MSU", DetectionGraphOppositeTN, inf, sup, "C:/Users/Pietro/Desktop/OutputTN/"+K+L+M+N+"_OppositeMSU"+numberMSU+h+"_TN.jpg");
		
		///////////////////////////////////////////////////////////////////////////////////
		
		userToBinaryDecisionIntelligentReputation=binaryVector;
		userToBinaryDecisionIntelligentReputation.putAll(Utils.genereteIntelligentOppositeMaliciousBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ReputationEnergyDetectionIntelligent=FC.reputationBasedDecision(inf, sup, userToBinaryDecisionIntelligentReputation,attempts,"Intelligent"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionIntelligentReputationTN=binaryVector;
		userToBinaryDecisionIntelligentReputationTN.putAll(Utils.genereteIntelligentOppositeMaliciousBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ReputationTNEnergyDetectionIntelligent=FC.reputationBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionIntelligentReputationTN,
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa),attempts,"Intelligent"+"MSU"+numberMSU+h);
		
		userToBinaryDecisionIntelligentList=binaryVector;
		userToBinaryDecisionIntelligentList.putAll(Utils.genereteIntelligentOppositeMaliciousBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ListCooperativeEnergyDetectionIntelligent= FC.ListBasedDecision(inf, sup, userToBinaryDecisionIntelligentList, attempts, K, L, M, N,"MSU"+numberMSU+"_Intelligent"+h);

		userToBinaryDecisionIntelligentListTN=binaryVector;
		userToBinaryDecisionIntelligentListTN.putAll(Utils.genereteIntelligentOppositeMaliciousBinaryDecisionVectors(MaliciousSecondaryUsers,pfa));
		ListCooperativeTNEnergyDetectionIntelligent=FC.ListBasedWithTrustedNodeDecision(inf, sup, userToBinaryDecisionIntelligentListTN, 
		Utils.genereteTrustedNodeBinaryDecisionVectors(TrustedNode, pfa), attempts, K, L, M, N, "Intelligent"+"MSU"+numberMSU+h);
		
		DetectionGraphIntelligent.put("ListBased", ListCooperativeEnergyDetectionIntelligent);
		DetectionGraphIntelligentTN.put("ListBased with TN", ListCooperativeTNEnergyDetectionIntelligent);
		DetectionGraphIntelligent.put("Reputation", ReputationEnergyDetectionIntelligent);
		DetectionGraphIntelligentTN.put("Reputation with TN", ReputationTNEnergyDetectionIntelligent);
		
		JFreeChartGraphGenerator graphIntelligent= new JFreeChartGraphGenerator("List Based VS Reputation - Intelligent MSU");
		graphIntelligent.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation- Intelligent MSU", DetectionGraphIntelligent, inf, sup, "C:/Users/Pietro/Desktop/Output/"+K+L+M+N+"_IntelligentMSU"+numberMSU+h+".jpg");
		
		JFreeChartGraphGenerator graphIntelligentTN= new JFreeChartGraphGenerator("List Based VS Reputation with TN - Intelligent MSU");
		graphIntelligentTN.drawAndSaveSNRtoDetectionGraph("List Based VS Reputation with TN - Intelligent MSU", DetectionGraphIntelligentTN, inf, sup, "C:/Users/Pietro/Desktop/OutputTN/"+K+L+M+N+"_IntelligentMSU"+numberMSU+h+"_TN.jpg");
		

	   }}
	}
}
