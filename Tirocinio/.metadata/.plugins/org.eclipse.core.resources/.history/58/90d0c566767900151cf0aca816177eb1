package it.sp4te.css.main;

import java.util.ArrayList;
import java.util.HashMap;

import it.sp4te.css.agents.PrimaryUser;
import it.sp4te.css.agents.SecondaryUser;
import it.sp4te.css.graphgenerator.GraphGenerator;
import it.sp4te.css.model.Signal;
import it.sp4te.css.signalprocessing.SignalProcessor;
import it.sp4te.fusioncenter.FusionCenter;

public class ClassicCooperativeSpectrumSensing {

	public static void main(String args[]) throws Exception {
		ArrayList<Double> TraditionalEnergyDetection = new ArrayList<Double>();;
		HashMap<String, ArrayList<Double>> DetectionGraph = new HashMap<String, ArrayList<Double>>();
		
		// Setto i parametri
				int length = 1000; // poi 10000
				int attempts = 100;
				int inf = -30;
				int sup = 5;
				int block=10; //blocchi energy Detector
				double pfa=0.01; //probabilità di falso allarme
		
		FusionCenter FC=new FusionCenter();
		PrimaryUser PU= new PrimaryUser();
        SecondaryUser FirstSU=new SecondaryUser();
        SecondaryUser SecondSU=new SecondaryUser();
        SecondaryUser ThirdSU=new SecondaryUser();
        
        Signal s = PU.createAndSend(length);
        
        FirstSU.listenChannel(s, length, SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
        SecondSU.listenChannel(s, length, SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
        ThirdSU.listenChannel(s, length, SignalProcessor.computeEnergy(s), attempts, inf, sup, block);
        
        ArrayList<ArrayList<Integer>> FirstdecisionVector=FirstSU.computeBinaryDecision(pfa);
        ArrayList<ArrayList<Integer>> SeconddecisionVector=SecondSU.computeBinaryDecision(pfa);
        ArrayList<ArrayList<Integer>> ThirddecisionVector=ThirdSU.computeBinaryDecision(pfa);
        
        for(int i=0;i<30;i++){
        	ArrayList<Integer> FirstsnrDecisionVector=FirstdecisionVector.get(i);
        	ArrayList<Integer> SecondsnrDecisionVector=SeconddecisionVector.get(i);
        	ArrayList<Integer> ThirdsnrDecisionVector=ThirddecisionVector.get(i);
        	 
        	ArrayList<ArrayList<Integer>> decisions=new ArrayList<ArrayList<Integer>>();
        	 decisions.add(FirstsnrDecisionVector);
        	 decisions.add(SecondsnrDecisionVector);
        	 decisions.add(ThirdsnrDecisionVector);
        	
        	 TraditionalEnergyDetection.add(FusionCenter.andFusionDetection(decisions));
        	
        	}
        
        DetectionGraph.put("Cooperative Energy Detection", TraditionalEnergyDetection);

		GraphGenerator.drawGraph("Detection Methods",DetectionGraph, inf, sup);
        }
        
        
	}

