package it.sp4te.css.detection;

import java.util.ArrayList;

import it.sp4te.css.signalprocessing.MathFunctions;

/**
 * <p>Titolo: Threshold</p>
 * <p>Descrizione: Classe per il calcolo delle soglie necessarie per il calcolo dei diversi tipi
 * di Detection</p>
 * @author Pietro Coronas
 **/
public class Threshold {

	/**
	 * Metodo per il calcolo della soglia necessaria per la Detection del metodo
	 * proposto.
	 * 
	 * @param Pfa Probabilità di falso allarme
	 * @param pr Lista di Double contenente i valori del parametro Pr
	 * calcolato nell'ipotesi in cui il segnale primario è assente (solo rumore)
	 * @return La soglia
	 * @throws Exception L'argomento della funzione InvErf deve essere compreso tra -1 e 1
	 **/

	public static double proposedThreshold(double Pfa, ArrayList<Double> pr) throws Exception {
		double M = MathFunctions.Avarege(pr);
		double V = MathFunctions.Variance(pr);

		double implThreshold = M + Math.sqrt(2 * V) * MathFunctions.InvErf(1 - 2 * Pfa);
		return implThreshold;
	}

	/**
	 * Metodo per il calcolo della soglia necessaria per l'energy Detector.
	 * 
	 * @param Pfa Probabilità di falso allarme
	 * @param energy Momento calcolato nell'ipotesi in cui il segnale primario è assente (solo rumore)
	 * @return La soglia necessaria per l'energy Detector
	 * @throws Exception L'argomento della funzione InvErf deve essere compreso tra -1 e 1
	 **/

	public static double energyDetectorThreshold(double Pfa, ArrayList<Double> energy) throws Exception {

		double M = MathFunctions.Avarege(energy);
		double V = MathFunctions.Variance(energy);

		double edThreshold = M + Math.sqrt(2 * V) * MathFunctions.InvErf(1 - 2 * Pfa);
		return edThreshold;
	}
}
