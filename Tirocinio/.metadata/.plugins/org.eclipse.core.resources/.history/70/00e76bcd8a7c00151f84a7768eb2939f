package it.sp4te.css.agents;

import java.util.ArrayList;

import it.sp4te.css.signalprocessing.SignalProcessor;

public class MaliciousSecondaryUser extends SecondaryUser {

	
	/**Questo metodo ritorna, per ogni valore di SNR , una lista di decisioni lunga quanto il numero di prove contenente l'assenza dell'utente
	 * primario per ogni misurazione. E' utilizzato per la creazione del vettore di decisione dell'utente malevolo
	 * @param attempts Numero di prove su cui effettuare la simulazione
	 * @param inf Estremo inferiore di SNR su cui effettuare la simulazione
	 * @param sup Estremo superiore di SNR su cui effettuare la simulazione 
	 * @return Una lista di liste contenente per ogni SNR, una lista decisioni binarie che affermanol'assenza dell'utente primario di cardinalità pari al numero di prove
	 * @throws Exception **/
	
	public ArrayList<ArrayList<Integer>> computeAbsenceBinaryDecision() throws Exception{
		ArrayList<ArrayList<Integer>> decisions= new  ArrayList<ArrayList<Integer>>();
		for(int i=inf;i<sup;i++){
			ArrayList<Integer> snrDecisions= new  ArrayList<Integer>();			
			for(int j=0;j<attempts;j++){
				snrDecisions.add(0);
			}
			decisions.add(snrDecisions);
		
			
		}
		return decisions;	
		}
	
	/**Questo metodo rappresenta il comportamento malevolo di un utente secondario, riportando un vettore di decisioni
	 * binarie che afferma la presenza dell'utente primario per ogni SNR in ogni prova
	 * * @return Un vettore di decisioni
	 * binarie che afferma la presenza dell'utente primario per ogni SNR in ogni prova
	 * * @throws Exception**/
	
	public ArrayList<ArrayList<Integer>> computePresenceBinaryDecision() throws Exception{
		ArrayList<ArrayList<Integer>> decisions= SignalProcessor.makePresenceBinaryDecisionVector(attempts, inf, sup);
		return decisions;	
		}
	
	/**Questo metodo rappresenta il comportamento malevolo di un utente secondario, riportando un vettore di decisioni
	 * binarie che afferma l'assenza dell'utente primario (se è presente) o la presenza dell'utente primario (se è assente)
	 * per ogni SNR in ogni prova
	 * @param pfa Probabilità di falso allarme
	 * @return Un vettore di decisioni
	 * binarie che afferma l'assenza dell'utente primario (se è presente) o la presenza dell'utente primario (se è assente)
	 * per ogni SNR in ogni prova
	 * * @throws Exception**/
	
	public ArrayList<ArrayList<Integer>> computeOppositeBinaryDecision(double pfa) throws Exception{
		ArrayList<ArrayList<Integer>> decisions= SignalProcessor.makeOppositeBinaryDecisionVector(s, length, energy, attempts, inf, sup,pfa);
		return decisions;	
		}
}
