package it.sp4te.CooperativeSpectrumSensing.Agents;

import java.util.*;


import it.sp4te.CooperativeSpectrumSensing.Detection.Detection;
import it.sp4te.CooperativeSpectrumSensing.Detection.Threshold;
import it.sp4te.CooperativeSpectrumSensing.DomainModel.Signal;
import it.sp4te.CooperativeSpectrumSensing.Functions.Moment;
import it.sp4te.CooperativeSpectrumSensing.Functions.SignalFunctions;



public class SecondaryUser {
	ArrayList<Moment> MomentsSignal;
	ArrayList<Moment> MomentsNoise;
	ArrayList<ArrayList<Double> > MomentSignalEnergy;
	ArrayList<ArrayList<Double> > MomentNoiseEnergy;
	
	public SecondaryUser(Signal s,int length,double energy,int attempts,int inf,int sup){
		//Genero i momenti nelle due ipotesi h0 e h1
		MomentsSignal =SignalFunctions.momentGenerator(s, length, energy, attempts, inf, sup);
		MomentsNoise =SignalFunctions.momentGenerator(null, length, energy, attempts, inf, sup);
	    
		//Calcolo l'energia
		MomentSignalEnergy = SignalFunctions.momentEnergy(MomentsSignal);
		MomentNoiseEnergy = SignalFunctions.momentEnergy(MomentsNoise);			
	}
	
	public ArrayList<Double> SpectrumSensingEnergyDetector() throws Exception {	
	//Creo una mappa snr->detection. 
	HashMap<Double,Double> EnergyDetection= new HashMap<Double,Double>();	
	
	//Calcolo la detection
	for(int i=0;i<this.MomentSignalEnergy.size();i++){
		
	//Soglia Prende in input i momenti calcolati sul rumore. L'energy detector la soglia e i momenti calcolati sul segnale
	Double PD= Detection.EnergyDetection(Threshold.EnergyDetectorThreshold(0.01, this.MomentNoiseEnergy.get(i)), MomentSignalEnergy.get(i));
	
	//MomentSignal per l'snr
	EnergyDetection.put(this.MomentsSignal.get(i).getSnr(),PD);
	
	
	
}
	
	//Ordino in base all'SNR e ritorno
	return orderSignal(EnergyDetection);
	}
	
	
	public ArrayList<Double> SpectrumSensingProposedDetector() throws Exception {
		HashMap<Double,Double> ProposedDetection= new HashMap<Double,Double>();	
		return orderSignal(ProposedDetection);
}
	
	
	//Data una mappa SNR->DETECTION, ritorna la lista delle detection ordinate
	public static ArrayList<Double> orderSignal(HashMap<Double,Double> signalmapToOrder){
	
		ArrayList<Double> snr= new ArrayList<Double>();
	for (Double key : signalmapToOrder.keySet()) {
		snr.add(key);}
	Collections.sort(snr);
	
	ArrayList<Double> Edetection= new ArrayList<Double>();
	for (Double key : snr) {
		Edetection.add(signalmapToOrder.get(key));}
	return Edetection;
	}

}